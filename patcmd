#!/usr/bin/env python3.9
# coding: UTF-8

import os
import sys
import fire
from importlib import resources
from pathlib import Path

import patents
from patents import (
    fetch, parse_apply, parse_grant, parse_assign, parse_maint, parse_tmapply, parse_compustat
)

# parser dispatcher
parsers = {
    'apply': parse_apply,
    'grant': parse_grant,
    'assign': parse_assign,
    'maint': parse_maint,
    'tmapply': parse_tmapply,
    'compustat': parse_compustat,
}

# get path with fallbacks
def get_path(path, env):
    if path is None:
        if env in os.environ:
            return Path(os.environ[env])
        else:
            return
    else:
        return Path(path)

# read list files
def get_lines(fpath):
    return [
        s.strip() for s in fpath.read_text().split('\n') if len(s) > 0
    ]

class Main:
    def __init__(self, datadir=None, metadir=None):
        self.datapath = get_path(datadir, 'PATENTS_DATADIR')
        self.metapath = get_path(metadir, 'PATENTS_METADIR')

        if self.datapath is None:
            print('Error: must specify "datadir" path')
            sys.exit()

        if self.metapath is None:
            self.metapath = resources.files(patents) / 'meta'

    def fetch(self, ftype, files=None, delay=10, overwrite=False, dryrun=False):
        if files is None:
            fpath = self.metapath / f'{ftype}_files.txt'
        else:
            fpath = Path(files)
        flist = get_lines(fpath)

        output = self.datapath / 'raw' / ftype
        fetch(flist, output, delay=delay, overwrite=overwrite, dryrun=dryrun)

    def parse(self, ftype, files=None, overwrite=False, dryrun=False):
        if files is None:
            files = self.datapath / 'raw' / ftype
        output = self.datapath / 'parsed' / ftype

        if ftype in parsers:
            parsers[ftype](files, output, overwrite=overwrite, dryrun=dryrun)
        else:
            print(f'Error: unknown data source "{ftype}"')

if __name__ == '__main__':
    fire.Fire(Main)
